#!/bin/bash


function 1p_op()
{
    cmd="$1"
    shift
    op $cmd --session="$token_auth" "$@"
}


function get_login_params()
{
    read -p "Domain name: " domain && \
        read -p "E-mail address: " email && \
        read -p "Secret key: " secret_key && \
        read -p "Master password (no echo): " -s master_password && \
        echo
}


function login()
{
    token_auth=$(op signin --output=raw "$domain" "$email" "$secret_key" "$master_password")
    return $?
}


function edit_login_params()
{
    while true; do
        cat <<MENU
Change parameter value?

1) Domain:          $domain
2) E-mail:          $email
3) Secret key:      $secret_key
4) Master password: <hidden>

y) Try again with these parameters.
n) Quit and go home.

MENU
        read -p "Choose wisely: "

        case "$REPLY" in
            1*)    read -p "Domain name: " domain                 ;;
            2*)    read -p "E-mail address: " email               ;;
            3*)    read -p "Secret key: " secret_key              ;;
            4*)    read -p "Master password: " -s master_password
                   echo                                           ;;
            y*|Y*) break                                          ;;
            n*|N*) exit 100                                       ;;
            *)     echo "Come on, try harder!"                    ;;
        esac
        echo
    done
}


function check_key_1p_ok()
{
    echo "You already have GPG key $key_id associated to identifier \`1p'."
    read -p "Keep and use it? (y/n) "
    case "$REPLY" in
        y* | Y*)
            return 0
            ;;
        n* | N*)
            ;;
        *)
            echo "I'll take that as a \`no' and replace it with a new one."
            echo
            ;;
    esac
    if ! gpg --batch --quiet --yes --delete-secret-and-public-key \
        $(gpg --with-colons --list-secret-keys $key_id | \
            awk -F: '/^fpr/{print $10; exit 0}')
    then
        cat <<NOCLEANUP
Unable to deleting key associated to identifier 1p. Please do some GPG
clean-up and try again.
NOCLEANUP
        exit 102
    fi
    make_new_key_1p
}


function make_new_key_1p()
{
    cat <<GENERATING
Generating new GPG key, which will be used for storage of your persistent
configuration. You will be prompted to input a passphrase for this key: you
should use one as strong as your 1Password master password -- it's ok to reuse
your master password for this purpose. Until then, please move the mouse
around to help generate some randomness for the process to progress...
GENERATING
    gpg --batch --quiet --quick-generate-key 1p </dev/null || exit $?
    echo "Done!"
    echo
}


function ensure_gpg_key_1p()
{
    key_id=$(gpg --batch --quiet --with-colons --list-secret-keys | \
        awk -F: '/^sec/{key=$5} /^uid.*1p/{print key}')
    case $(wc --words <<<"$key_id") in
        0) make_new_key_1p ;;
        1) check_key_1p_ok ;;
        *)
            cat <<KEY_CLEANUP
You own multiple GPG keys for identifier \`1p'. Delete some of them, so as to
have no more than one for this identifier, thereby resolving my confusion.
KEY_CLEANUP
            exit 101
            ;;
    esac
}


function setup_initial()
{
    ensure_gpg_key_1p
    cat <<INTRO
I now need a few parameters from you. You can look them up in the browser or
desktop version of 1Password, typically somewhere around the Preferences
dialog.

INTRO
    get_login_params
    while ! login; do
        edit_login_params
    done
    gpg --quiet --encrypt --recipient 1p <<-CONFIG >$path_config
	{
	    "domain": "$domain",
	    "email": "$email",
	    "secret_key": "$secret_key",
	    "master_password": "$master_password"
	}
	CONFIG
    chmod 600 $path_config
    echo "Persistent configuration saved."
    echo
}


function set_token_auth()
{
    token_auth="$1"
    local p=$(mktemp)
    jq ".token_auth = \"$token_auth\"" $path_config >$p
    mv $p $path_config
}


function ensure_login()
{
    if [ -z "$token_auth" ]; then
        login || exit $?
    fi
}


function unquote()
{
    echo "$1" | xargs
}


function make_map_vaults()
{
    local p=$(mktemp)
    1p_op "list vaults" | jq --compact-output 'map({"key": .uuid, "value": .name}) | from_entries' >$p && \
        map_vaults=$(< $p)
    local x=$?
    rm -f $p
    [ "$x" -ne 0 ] && exit $x
}


function list_items()
{
    make_map_vaults
    local p=$(mktemp)
    1p_op "list items" | \
        jq --compact-output --argjson map_vaults "$map_vaults" \
            'map(
                {
                    "uuid"    : .uuid,
                    "vault"   : $map_vaults[.vaultUuid],
                    "name"    : .overview.title
                }
            )' >$p
    local x=$?
    local list_reformatted=$(<$p)
    rm -f $p
    [ "$x" -ne 0 ] && exit $x

    if [ "$format" = "json" ]; then
        jq '.' <<<"$list_reformatted"
    else
        local len_uuid=$(jq 'map(.uuid | length) | max' <<<"$list_reformatted")
        local len_vault=$(jq 'map(.vault | length) | max' <<<"$list_reformatted")
        jq --raw-output 'sort_by([.vault, .name]) | .[] | [.uuid, .vault, .name] | join("::")' <<<"$list_reformatted" | \
            awk -F '::' "\
                BEGIN{ printf(\"%-${len_uuid}s   %-${len_vault}s   %s\\n\", \"UUID\", \"VAULT\", \"NAME\") } \
                1{ printf(\"%-${len_uuid}s   %-${len_vault}s   %s\\n\", \$1, \$2, \$3) }"
    fi
}


function build_opt_vault()
{
    local opt_vault=""
    if [ -n "$vault" ]; then
        opt_vault="--vault=$vault"
    fi
}


function get_item_from_1p()
{
    build_opt_vault
    local p=$(mktemp)
    trap "rm -f $p" EXIT
    1p_op "get item" "$title" $opt_vault >$p
    x=$?
    if [ $x -eq 0 ]; then
        jq --compact-output --argjson map_vaults "$map_vaults" '
            def field_value(name_field): ((.details.fields // [])[] | select(.name == name_field) | .value) // "" ;
            {
                "uuid":        .uuid,
                "username":    field_value("username"),
                "password":    field_value("password"),
                "notes":       (.details.notesPlain // ""),
                "title":       (.overview.title // ""),
                "url":         (.overview.url // ""),
                "vault":       ($map_vaults[.vaultUuid] // .vaultUuid),
                "details_raw": .details
            }' <$p
    else
        return $x
    fi
}


function get_item_from_1p_or_create()
{
    if ! get_item_from_1p 2>/dev/null; then
        cat <<-SKELETON
		{
		    "uuid":        "",
		    "username":    "",
		    "password":    "",
		    "notes":       "",
		    "title":       "$title",
		    "url":         "",
		    "vault":       "$vault",
		    "details_raw": $(1p_op "get template" Login)
		}
		SKELETON
    fi
}


function get_item()
{
    make_map_vaults
    get_item_from_1p | \
        (
            if [ "$format" = "json" ]; then
                jq 'del(.details_raw)'
            else
                jq --raw-output --arg item "$item" '.[$item]' | (
                    if [ "$is_copy_or_echo" = "echo" ]; then
                        cat
                    else
                        tr -d "\n" | xsel -ib
                    fi
                )
            fi
        ) || exit $?
}


function modify_item()
{
    build_opt_vault
    if 1p_op "create item" Login $(echo "$details" | op encode) --title="$title" --url="$url" $opt_vault >/dev/null; then
        if [ -n "$uuid_orig" ]; then
            1p_op "delete item" "$uuid_orig"
        fi
    fi
}


function set_item()
{
    map_vaults='{}'
    local p=$(mktemp)
    get_item_from_1p_or_create </dev/null >$p || exit $?
    trap "rm -f $p" EXIT
    local item_raw=$(cat $p && rm $p)
    uuid_orig=$(jq --raw-output '.uuid' <<<"$item_raw")
    url=$(jq --raw-output '.url' <<<"$item_raw")
    title=$(jq --raw-output '.title' <<<"$item_raw")
    vault=$(jq --raw-output '.vault' <<<"$item_raw")
    details=$(jq --raw-output '.details_raw' <<<"$item_raw")

    local new_value="${params[1]}"
    if [ "$format" = "stdin" ]; then
        local prompt
        case "$item" in
            notes) prompt="Type new notes over a single line: " ;;
            url)   prompt="Enter new URL: "                     ;;
            *)     prompt="Enter new $item: "                   ;;
        esac
		if ! tty >/dev/null; then
			cat 1>&2 <<DANGER
Warning: password given through a redirected standard input. If input source
can be replicated, or the password can be deduced or repeated from a command
line, the password is unsafe.
DANGER
		fi
        local mode_read="-e"
        if [ "$item" = "password" ]; then
            mode_read="-s"
        fi
		read $mode_read -p "$prompt" new_value
    elif [ "$item" = "password" ]; then
        cat 1>&2 <<DANGER
Warning: specifying passwords on the command line is *DANGEROUS*. Make sure
clear your shell history ASAP.
DANGER
    fi
    case "$item" in
        password | username)
            details=$(jq --arg attr "$item" --arg new_value "$new_value" \
                --argjson map_type '{"username": "T", "password": "P"}' \
                '.fields = ([.fields[] | select(.name != $attr)] + [{"name": $attr, "designation": $attr, "type": $map_type[$attr], "value": $new_value}])' \
                <<<"$details")
            ;;
        notes)
            details=$(jq --arg new_value "$new_value" '.notesPlain = $new_value' <<<"$details")
            ;;
        url | title)
            eval "$item=\"$new_value\""
            ;;
        *)
            echo "Don't know how to set attribute \`$item'."
            exit 10
            ;;
    esac

    modify_item
}


function split_title_vault()
{
    if [ -n "${params[0]}" ]; then
        eval $(jq --raw-input --raw-output 'split("@") | "title=\"\(.[0])\"\nvault=\"\(.[1] // "")\"\n"' <<<"${params[0]}")
    else
        title=""
        vault=""
    fi
}


function do_default()
{
    split_title_vault
    ensure_login

    case "$num_params" in
        0) list_items ;;
        1)
            if [ "$format" = "stdin" ]; then
                set_item
            else
                get_item
            fi
            ;;
        *) set_item   ;;
    esac
}


function do_edit()
{
    ensure_login
    split_title_vault
    map_vaults='{}'
    if [ -n "title" ]; then
        if [ -z "$EDITOR" ]; then
            EDITOR="vi"
        fi

        local p=$(mktemp)
        trap "rm -f $p $p.raw" EXIT
        get_item_from_1p_or_create >"$p.raw" || exit $?
        jq --raw-output '.notes' "$p.raw" >"$p"
        eval "$EDITOR $p" || exit $?

        if ! diff -q $p <(jq --raw-output '.notes' "$p.raw") 2>/dev/null; then
            uuid_orig=$(jq --raw-output '.uuid' "$p.raw")
            url=$(jq --raw-output '.url' "$p.raw")
            vault=$(jq --raw-output '.vault' "$p.raw")
            details=$(jq --raw-output --arg notes "$(cat "$p")" '.details_raw | .notesPlain = $notes' "$p.raw")
            modify_item
        fi
    else
        echo "Missing name of item to edit notes for."
        exit 20
    fi
}


function do_rm()
{
    ensure_login
    split_title_vault
    if [ -n "$title" ]; then
        build_opt_vault
        local p=$(mktemp)
        trap "rm -f $p" EXIT
        if ! 1p_op "delete item" "$title" $opt_vault 2>$p; then
            # 1Password's op is stupid: it confounds trashed and non-trashed
            # items when trying to delete. Since we are forced to
            # create+delete in order to modify an item, we obviously become
            # stuck with a large set of identically-named items, making the
            # first delete fail unduly often. Fortunately, this first delete
            # shows us the UUIDs of colliding objects, so we can delete all of
            # them thereafter. Emptying the trash, either through the browser
            # or the desktop app, finally removes all these spurious dupes
            # from the database altogether.
            for uuid in $(jq --raw-input --raw-output 'match("op delete item ([0-9a-z]+)").captures[0].string' $p); do
                1p_op "delete item" "$uuid"
            done
        fi
    else
        echo "Missing name of item to remove."
        exit 20
    fi
}


function do_help()
{
    cat <<HELP
$0 -- A more usabel command line interface to 1Password


== Usages ==

1. $0
    - Lists all items over all accessible vaults.
2. $0 [-C|-E] [-j|-u|-p|-n|-U|-T] <title>[@<vault>]
    - Echoes / copies to clipboard data regarding an item. By default, this
      copies the password of the item to the clipboard.
3. $0 [-u|-p|-n|-U|-T] <title>[@<vault>] <new value>
    - Sets an attribute of an item, creating it if it does not exist.
4. $0 -e/--edit <title>[@<vault>]
    - Edits the notes associated to an item, creating it if it does not exist.
5. $0 --rm <title>[@<vault>]
    - Deletes an item.
6. $0 -h/--help
    - Prints this manual and exits.
7. $0 -V/--version
    - Echoes version and exits.


== Item specification ==

Forms 2 to 5 of the command specify an item of one's 1Password database for
query or modification. Such specification take the form

    <title>[@<vault>]

For instanace, if I want to query data about item \`Google' from vault
\`Common', I would specify it as

    Google@Common

Spaces in item and vault names are permitted, provided they are escaped or
quoted as the shell commands. If the vault is not specified, the user's
default vault is assumed (typically the Private vault).


== Initial setup ==

The first time this tool is used, a sequence of interactive queries will
grab one's main logon informations for 1Password, and save them for later
usage in file \$HOME/.1p, in crypted form. One may redo this setup by adding
option --setup to any form of the command.


== Logging in and logging out ==

1p is a wrapper around the \`op' utility developed by AgileBits. However, op's
login mechanism does not integrate with modern keyring systems typically used
to store passwords to SSH and GPG keys. Thus, we wrap op's login into GPG
cryptography. On initial setup, a GPG key is generated for identifier \`1p',
and one is encouraged to use their 1Password master password to saveguard this
key. It is used to encrypt the 1Password persistent configuration, and
decrypt it whenever $0 is invoked. As GPG does properly rely on a session
keyring, one only has to input either their key password once to include the
key in their keyring, then their session (or keyring) password will provide
session persistence.


== Description of options ==

-C / --copy       For data query (form 2), copies data to the clipboard
                  (ignored when -j/--json is set). This behaviour is the
                  default action for form 2.

-E / --echo       For data query (form 2), echoes data to standard output.

-T / --title      Queries or modifies the title of an item (forms 2 and 3).

-U / --url        Queries or modifies the URL associated to an item (form 2
                  and 3).

-e / --edit       Invokes one's favourite \$EDITOR to modify the notes
                  associated to an item (form 4). Once the user exits the
                  editor, the notes are saved back to the 1Password database.

-j / --json       For data queries (form 2), ignores field selection (options
                  -u/--username, -p/--password, -n/--notes, -T/--title and
                  -U/--url), and writes a JSON object with full data about the
                  object to standard output.

-n / --notes      Queries or modifies the notes associated to the named item
                  (forms 2 and 3).

-p / --password   Queries or modifies the password of the item (forms 2 and 3).
                  This is the default attribute affected by these forms of the
                  command.

--raw             Forces non-JSON formatting of data query results (form 2),
                  with attribute selection of the named item (through options
                  -u, -p, -n, -T or -U) and the possibility of clipboard copy.

--rm              Deletes ("trashes" in 1Password parlance) the named item
                  from the database (form 5).

--setup           Forces the initial setup sequence to be executed over, even
                  after it has been done successfully once.

-u / --user       Queries or modifies the username of the item (forms 2 and 3).


== Generating random passwords ==

Use utility \`pwgen' (which you may install separately) to generate random
passwords on the fly. For instance, to create a new item "Facebook" with a
16-character password, run

\$ $0 Facebook \$(pwgen -1 16)

You may then complete the setup of the Facebook item with further commands to
set the username, and so on.


== Author ==

Benoit Hamelin <benoit@benoithamelin.com>
June 2018
HELP
    exit 0
}


function do_version()
{
    echo "|||TAG|||"
    exit 0
}


#--- Entry point ------------------------------------------------------------

num_params=""
declare -a params
is_setup_initial=""
action="default"
format="raw"
item="password"
is_copy_or_echo="copy"

eval set -- $(getopt --name "$0" --options 'CETUVehijnpu' --longoptions 'copy,echo,title,url,version,edit,help,input,json,notes,password,raw,rm,setup,user' -- "$@") || exit $?
while [ -n "$1" ]; do
    case "$1" in
        -C | --copy)
            is_copy_or_echo="copy"
            ;;
        -E | --echo)
            is_copy_or_echo="echo"
            ;;
        -T | --title)
            item="title"
            ;;
        -U | --url)
            item="url"
            ;;
        -e | --edit)
            action="edit"
            ;;
        -h | --help)
            do_help
            ;;
        -i | --input)
            format="stdin"
            ;;
        -j | --json)
            format="json"
            ;;
        -n | --notes)
            item="notes"
            ;;
        -p | --password)
            item="password"
            ;;
        --raw)
            format="raw"
            ;;
        --rm)
            action="rm"
            ;;
        --setup)
            is_setup_initial="yes"
            ;;
        -u | --user)
            item="username"
            ;;
        -V | --version)
            do_version
            ;;
        --)
            num_params=0
            ;;
        *)
            if [ -z "$num_params" ]; then
                echo "Unknown parameter: $1"
                echo "Check out documentation by invoking $0 --help."
                exit 1
            else
                params[$((num_params++))]=$(unquote "$1")
            fi
    esac
    shift
done

path_config="$HOME/.1p"
declare -a config
if [ ! -f "$path_config" -o -n "$is_setup_initial" ]; then
    setup_initial
else
    config_json=$(gpg --quiet --decrypt <"$path_config")
    if [ "$?" -ne 0 ]; then
        echo "Unable to load persistent configuration; abort."
        exit 7
    fi
    for name_config in domain email secret_key master_password; do
        value=$(jq --raw-output ".$name_config" <<<"$config_json")
        eval "$name_config='$value'"
    done
fi

eval "do_$action"
exit $?
