#!/bin/bash


function unimplemented()
{
    echo "UNIMPLEMENTED"
    exit 127
}


function 1p_op()
{
    cmd="$1"
    shift
    op $cmd --session="$token_auth" "$@"
}


function setup_initial()
{
    echo "Hello! Before we start, I need a few parameters from you. You can look them up"
    echo "in the browser or desktop version of 1Password, typically somewhere around the"
    echo "Preferences dialog."
    echo
    read -p "Domain name: " domain && \
        read -p "E-mail address: " email && \
        read -p "Secret key: " secret_key
    cat > $path_config <<-CONFIG
	{
	    "domain": "$domain",
	    "email": "$email",
	    "secret_key": "$secret_key",
	    "token_auth": ""
	}
	CONFIG
    token_auth=""
    echo "Persistent configuration saved."
}


function set_token_auth()
{
    token_auth="$1"
    local p=$(mktemp)
    jq ".token_auth = \"$token_auth\"" $path_config >$p
    mv $p $path_config
}


function ensure_login()
{
    local msg_error=$(1p_op "get item" __dummy__ 2>&1)
    if grep --quiet 'not currently signed in\|Authentication required' <<<"$msg_error" && [ "$action" != "logout" ]; then
        local p=$(mktemp)
        op signin --output=raw $domain $email $secret_key >$p && \
            set_token_auth $(< $p)
        local x=$?
        rm -f $p
        [ "$x" -ne 0 ] && exit $x
    fi
}


function unquote()
{
    echo "$1" | xargs
}


function make_map_vaults()
{
    local p=$(mktemp)
    1p_op "list vaults" | jq --compact-output 'map({"key": .uuid, "value": .name}) | from_entries' >$p && \
        map_vaults=$(< $p)
    local x=$?
    rm -f $p
    [ "$x" -ne 0 ] && exit $x
}


function list_items()
{
    make_map_vaults
    local p=$(mktemp)
    1p_op "list items" | \
        jq --compact-output --argjson map_vaults "$map_vaults" \
            'map(
                {
                    "uuid"    : .uuid,
                    "vault"   : $map_vaults[.vaultUuid],
                    "name"    : .overview.title
                }
            )' >$p
    local x=$?
    local list_reformatted=$(<$p)
    rm -f $p
    [ "$x" -ne 0 ] && exit $x

    if [ "$format" = "json" ]; then
        jq '.' <<<"$list_reformatted"
    else
        local len_uuid=$(jq 'map(.uuid | length) | max' <<<"$list_reformatted")
        local len_vault=$(jq 'map(.vault | length) | max' <<<"$list_reformatted")
        jq --raw-output 'sort_by([.vault, .name]) | .[] | [if .trashed == "N" then " " else "X" end, .uuid, .vault, .name] | join("::")' <<<"$list_reformatted" | \
            awk -F '::' "\
                BEGIN{ printf(\"%-${len_uuid}s   %-${len_vault}s   %s\\n\", \"UUID\", \"VAULT\", \"NAME\") } \
                1{ printf(\"%-${len_uuid}s   %-${len_vault}s   %s\\n\", \$1, \$2, \$3) }"
    fi
}


function get_item_from_1p()
{
    1p_op "get item" "${params[0]}" |
        jq --compact-output '
            def field_value(name_field): (.fields[] | select(.designation == name_field) | .value) // "" ;
            .details | {
                "username": field_value("username"),
                "password": field_value("password"),
                "notes": (.notesPlain // "")
            }' || exit $?
}


function get_item()
{
    get_item_from_1p | (
        if [ "$format" = "json" ]; then
            jq
        else
            jq --raw-output --arg item "$item" '.[$item]' | (
                if [ "$is_copy_or_echo" = "echo" ]; then
                    cat
                else
                    tr -d "\n" | xsel -ib
                fi
            )
        fi
    ) || exit $?
}


function set_item()
{
    unimplemented
}


function do_default()
{
    ensure_login
    case "$num_params" in
        0) list_items ;;
        1) get_item   ;;
        *) set_item   ;;
    esac
}


function do_logout()
{
    1p_op "signout" >/dev/null 2>&1
    set_token_auth ""
    exit 0
}


num_params=""
declare -a params
is_setup_initial=""
action="default"
format=""
item="password"
vault=""
is_copy_or_echo="copy"

eval set -- $(getopt --name "$0" --options 'CEhjnpuV:0' --longoptions 'copy,echo,help,json,notes,password,raw,setup,user,vault,logout:' -- "$@") || exit $?
while [ -n "$1" ]; do
    case "$1" in
        # -h | --help)
        #     action="doc"
        #     ;;
        -C | --copy)
            is_copy_or_echo="copy"
            ;;
        -E | --echo)
            is_copy_or_echo="echo"
            ;;
        -j | --json)
            format="json"
            ;;
        -n | --notes)
            item="notes"
            ;;
        -p | --password)
            item="password"
            ;;
        --raw)
            format="raw"
            ;;
        --setup)
            is_setup_initial="yes"
            ;;
        -u | --user)
            item="username"
            ;;
        -0 | --logout)
            action="logout"
            ;;
        --)
            num_params=0
            ;;
        *)
            if [ -z "$num_params" ]; then
                echo "Unknown parameter: $opt"
                echo "Check out documentation by invoking $0 --help."
                exit 1
            else
                params[$((num_params++))]=$(unquote "$1")
            fi
    esac
    shift
done

path_config="$HOME/.1p"
declare -a config
if [ ! -f "$path_config" -o -n "$is_setup_initial" ]; then
    setup_initial
else
    for name_config in domain email secret_key token_auth; do
        value=$(jq --raw-output ".$name_config" $path_config)
        eval "$name_config='$value'"
    done
fi

eval "do_$action"
